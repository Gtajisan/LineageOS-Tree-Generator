name: Auto LineageOS Tree Generator

on:
  workflow_dispatch:
    inputs:
      DUMP_URL:
        description: 'Dump link'
        required: true
        default: ''
      DUMP_BRANCH:
        description: 'Dump branch'
        required: true
        default: ''
      DEVICE_BRAND:
        description: 'Device manufacturer'
        required: true
        default: ''
      CODENAME:
        description: 'Device codename'
        required: true
        default: ''
      GIT_NAME:
        description: 'GitHub account user name'
        required: true
        default: ''
      GIT_EMAIL:
        description: 'GitHub account email address'
        required: true
        default: ''

jobs:
  gen-tree:
    name: Create LineageOS compatible tree
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.LOS }}
      DU: ${{ github.event.inputs.DUMP_URL }}
      DB: ${{ github.event.inputs.DEVICE_BRAND }}
      DUB: ${{ github.event.inputs.DUMP_BRANCH }}
      CN: ${{ github.event.inputs.CODENAME }}
      GN: ${{ github.event.inputs.GIT_NAME }}
      GE: ${{ github.event.inputs.GIT_EMAIL }}

    permissions:
      contents: write

    steps:
    - name: Check Out
      uses: actions/checkout@v4

    - name: Update and install required packages
      run: |
        echo "📦 Updating system and installing packages..."
        sudo apt update && sudo apt upgrade -y
        sudo apt install -y cpio python3 python3-pip git curl

    - name: Setup GitHub CLI
      run: |
        echo "🔧 Installing GitHub CLI..."
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update && sudo apt install gh -y

    - name: Cloning ROM Dump
      run: |
        echo "📥 Cloning ROM dump from $DU with branch $DUB..."
        WORKDIR="/home/runner/LOS-Generator"
        mkdir -p "$WORKDIR"
        cd "$WORKDIR"

        # Verify branch exists before cloning
        if git ls-remote --heads "$DU" "$DUB" | grep "$DUB" > /dev/null; then
          git clone --depth=1 -b "$DUB" "$DU" dump
        else
          echo "❌ Error: Branch '$DUB' not found in repository '$DU'."
          exit 1
        fi

    - name: Installing AOSPDTGEN
      run: |
        echo "📦 Installing aospdtgen..."
        pip3 install --upgrade aospdtgen

    - name: Creating LineageOS Tree
      run: |
        echo "🔧 Generating device tree..."
        cd /home/runner/LOS-Generator/dump
        python3 -m aospdtgen .
        if [ ! -d "output" ]; then
          echo "❌ Error: output directory not found. Device tree generation failed."
          exit 1
        fi
        mv output /home/runner/LOS-Generator

    - name: Setting up Git
      run: |
        echo "🔧 Configuring Git..."
        git config --global user.name "${{ env.GN }}"
        git config --global user.email "${{ env.GE }}"

    - name: Upload LineageOS Tree to GitHub
      run: |
        echo "🚀 Preparing to upload the device tree to GitHub..."
        cd /home/runner/LOS-Generator/output
        git init
        git checkout -b lineage-${{ env.CN }}
        git add .
        git commit -s -m "${{ env.CN }}: LineageOS compatible device tree"

        echo "${{ secrets.LOS }}" | gh auth login --with-token

        REPO_NAME="lineage_device_${{ env.DB }}_${{ env.CN }}"

        if gh repo view "$REPO_NAME" > /dev/null 2>&1; then
          echo "⚠️ Repository already exists. Cloning and pushing to it..."
          gh repo clone "$REPO_NAME" /tmp/existing_repo
          cp -r . /tmp/existing_repo
          cd /tmp/existing_repo
          git add .
          git commit -s -m "Update LineageOS device tree for ${{ env.CN }}"
          git push origin lineage-${{ env.CN }}
        else
          echo "📁 Creating new repository..."
          gh repo create "$REPO_NAME" --public --description="LineageOS compatible device tree for ${{ env.CN }}." --source=. --remote=origin --push
        fi

    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up..."
        rm -rf /home/runner/LOS-Generator
        rm -rf /tmp/existing_repo || true

    - name: Workflow Complete
      run: |
        echo "✅ Device tree generation and upload complete!"
        echo "📦 Codename: ${{ env.CN }}"
        echo "🏷️ Brand: ${{ env.DB }}"
        echo "🔗 Repo: https://github.com/${{ env.GN }}/lineage_device_${{ env.DB }}_${{ env.CN }}"
